apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
  labels:
    app: app
spec:
  replicas: {{ ternary 1 0 .Values.enabled }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
    spec:
      terminationGracePeriodSeconds: 10
      imagePullSecrets:
        - name: diploi-pull-secret
      initContainers: 
        - name: create-db
          image: postgres:13  # Ensure this matches your PostgreSQL version
          env:
            - name: PGPASSWORD
              value: {{ .Values.envMap.POSTGRES_PASSWORD.value | quote }}
          command:
            - sh
            - -c
            - |
              psql -h {{ .Values.envMap.POSTGRES_HOST.value | quote }} -U {{ .Values.envMap.POSTGRES_USER.value | quote }} -tc "SELECT 1 FROM pg_database WHERE datname = '{{ .Values.envMap.DB_DATABASE.value }}'" | grep -q 1 || psql -h {{ .Values.envMap.DB_HOST.value }} -U {{ .Values.envMap.DB_USER.value }} -c "CREATE DATABASE {{ .Values.envMap.DB_DATABASE.value }}"
  
      containers:
        - name: app
          image: {{ .Values.images.app }}
          imagePullPolicy: Always
          #workingDir: /app/{{ .Values.identifier }}
          #command: ['sh', '-c', 'echo The app is running! && sleep 10000']
          ports:
            - containerPort: 8069
          env:
            {{- range .Values.env }}
            - name: {{ .identifier }}
              value: {{ .value | quote }}
            {{- end }}
            {{- range .Values.parameterGroups }}
            - name: {{ .identifier }}
              value: {{ .value | quote }}
            {{- end }}
            - name: APP_PUBLIC_URL
              value: {{ .Values.hosts.app }}
            - name: STAGE
              value: {{ .Values.stage }}
            - name: HOST
              value: {{ .Values.envMap.POSTGRES_HOST.value | quote }}
            - name: PORT
              value: {{ .Values.envMap.POSTGRES_PORT.value | quote }}
            - name: USER
              value: {{ .Values.envMap.DB_USER.value | quote }}
            - name: PASSWORD
              value: {{ .Values.envMap.DB_PASSWORD.value | quote }}
          volumeMounts:
            - name: data-mount
              mountPath: /var/lib/odoo
            {{- if hasKey .Values.storage "home" }}
            - name: home-mount
              mountPath: /home/odoo
            {{- end }}
            {{- if hasKey .Values.storage "extra-addons" }}
            - name: extra-addons-mount
              mountPath: /mnt/extra-addons
            {{- end }}
      volumes:
        - name: data-mount
          hostPath:
            path: {{ .Values.storage.data.hostPath }}
        {{- if hasKey .Values.storage "home" }}
        - name: home-mount
          hostPath:
            path: {{ .Values.storage.home.hostPath }}
        {{- end }}
        {{- if hasKey .Values.storage "extra-addons" }}
        - name: extra-addons-mount
          hostPath:
            path: {{ index (index .Values.storage "extra-addons") "hostPath" }}
        {{- end }}



